import java.util.Random;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Container;
import java.awt.FlowLayout;
import javax.swing.JLabel;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.AbstractButton;
import javax.swing.JButton;
import javax.swing.ImageIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;


@SuppressWarnings("unused")

class RPSGUI extends JPanel implements ActionListener{
	public enum Attack {
		ROCK,
		PAPER,
		SCISSORS
	}

	static Attack pick = null, compPick = null;
	static int win = 0, lose = 0, draw = 0;
	
	
	protected  JButton rockB, paperB, scissorsB, paB;
	JLabel intro, winL, loseL, drawL;
	
	public RPSGUI() {
	
		
		
	rockB = new JButton ("Rock");
	rockB.setVerticalTextPosition(AbstractButton.CENTER);
    rockB.setHorizontalTextPosition(AbstractButton.LEADING);
    
    paperB = new JButton ("Paper");
	paperB.setVerticalTextPosition(AbstractButton.CENTER);
    paperB.setHorizontalTextPosition(AbstractButton.CENTER);
    
    scissorsB = new JButton ("Scissors");
	scissorsB.setVerticalTextPosition(AbstractButton.CENTER);
    scissorsB.setHorizontalTextPosition(AbstractButton.TRAILING);
    
    paB = new JButton ("Play Again");
  
    rockB.addActionListener((new ActionListener()
    {
        public void actionPerformed(ActionEvent e)
        {
        	
        	pick = Attack.ROCK;
        	compPick = randomAttack();
        	rockB.setVisible(false); paperB.setVisible(false); scissorsB.setVisible(false);
        	
        }
    }));
    paperB.addActionListener(new ActionListener()
    {
        public void actionPerformed(ActionEvent e)
        {
        	pick = Attack.PAPER;
        	rockB.setVisible(false); paperB.setVisible(false); scissorsB.setVisible(false);
        	compPick = randomAttack();
        	
        }
    });
    scissorsB.addActionListener(new ActionListener()
    {
        public void actionPerformed(ActionEvent e)
        {
        	pick = Attack.SCISSORS;
        	rockB.setVisible(false); paperB.setVisible(false); scissorsB.setVisible(false);
        	compPick = randomAttack();
        	JLabel Test;
        }
    });
    paB.addActionListener(this);
  
    
    JFrame frame = new JFrame("Rock, Paper, Scissors!");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.add(new JLabel("Welcome to Rock, Paper, Scissors!"));
    frame.add(rockB);
	frame.add(paperB);
	frame.add(scissorsB);
    
	frame.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 200));
    frame.setBounds(650, 300, 500, 400);

    //Display the window.
  
    frame.setVisible(true);
	

	
	}
	
	
	
	
	

	
	
	public static void main(String[] args) {
		
		new RPSGUI();
		
	}	
	
		
	public static void RPSTest() {
		
	
		if ((compPick == Attack.SCISSORS && pick == Attack.SCISSORS) || 
				(compPick == Attack.ROCK && pick == Attack.ROCK) ||
				(compPick == Attack.PAPER && pick == Attack.PAPER)) {
				System.out.println("Draw! \nYou Picked: " + pick + "\nComputer Picked: " + compPick);
				draw++;
			}
		if ((compPick == Attack.SCISSORS && pick == Attack.ROCK) || 
				(compPick == Attack.ROCK && pick == Attack.PAPER) ||
				(compPick == Attack.PAPER && pick == Attack.SCISSORS)) {
				System.out.println("You Win! \nYou Picked: " + pick + "\nComputer Picked: " + compPick);
				win++;
			}
		if ((compPick == Attack.SCISSORS && pick == Attack.PAPER) || 
				(compPick == Attack.ROCK && pick == Attack.SCISSORS) ||
				(compPick == Attack.PAPER && pick == Attack.ROCK)) {
				System.out.println("You Lose! \nYou Picked: " + pick + "\nComputer Picked: " + compPick);
				lose++;
		}
	} 


private static Attack randomAttack() {
    int pick = new Random().nextInt(Attack.values().length);
    return Attack.values()[pick];
}








@Override
public void actionPerformed(ActionEvent e) {
	// TODO Auto-generated method stub
	
}




}
